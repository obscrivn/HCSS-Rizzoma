#kwic.extract <- list()
#
w = 1
titles <-vector()
authors <-vector()
datetimes <- vector()
abstracts <- vector()
extraction <- list()
lines.merge <- ""
# texts <- vector()
# titles <-vector()
# authors <- vector()
#  datetimes <- vector()
for (i in 1:num) {
#content <- zot_data[[i]]
content <- zot_data[[5]][i]
corpus.collapse<-paste(content,collapse=" ")
text.punct<-  gsub('[[:digit:]]+', '', corpus.collapse)
text.punct <- tolower(text.punct)
text.punct <-rm_citation(text.punct)
text.punct <-rm_citation(text.punct, pattern="@rm_citation3")
text.punct <-rm_citation(text.punct, pattern="@rm_citation2")
text.punct <-rm_round(text.punct)
text.punct <-rm_curly(text.punct)
text.punct <-rm_square(text.punct)
text.split<-unlist(strsplit(text.punct, "References|references|REFERENCES"))
#text.split <- unlist(text.p)
text.punct<-text.split[1]
text.punct <- gsub("[^[:alnum:] ]", "", text.punct)
text.punct <- gsub("\\s\\s+"," ",text.punct)
# lda.list <- unlist(strsplit(corpus.collapse[[i]], "\\s+"))
lda.list <- unlist(strsplit(text.punct, "\\s+"))
# remove punctuation
# if (condition %in% "and") {
loc1<- grep(query1, lda.list,perl=TRUE)
loc2<- grep(query2, lda.list,perl=TRUE)
### choose the smallest
list.loc <- list(loc1,loc2)
if (length(loc1)<length(loc2)){
z=1
# ### Add between window
for (k in 1:length(loc1)) {
# if ((loc1[k]-between)>0) {
strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
#   else {
#     strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
if (query2 %in% strings) {
### add left and right context
match.string <- lda.list[(loc1[k]-between-len):(loc1[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# }
}
else {
z=1
### Add between window
for (k in 1:length(loc2)) {
# if ((loc2[k]-between)>0) {
strings <- lda.list[(loc2[k]):(loc2[k]+between)]
if (query1 %in% strings) {
### add left and right context
match.string <- lda.list[(loc2[k]-between-len):(loc2[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
# lines[[k]] <- line
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# text.extract[[i]] <- lines.merge
#  }
}
# lines.merge <- paste(unlist(lines), collapse=" ")
if (length(lines.merge)>1) {
#text.extract[[i]] <- lines.merge
text.extract[[w]] <- lines.merge
title <- zot_data[[1]][i]
datetime <- zot_data[[4]][i]
abstract <- zot_data[[2]][i]
name <- zot_data[[3]][i]
titles[w] <- title
authors[w] <- name
datetimes[w] <- datetime
abstracts[w] <- abstract
w=w+1
}
}
text.extract <- unlist(text.extract)
info <- list(lines.merge=lines.merge,text.extract=text.extract,titles=titles,datetimes=datetimes, authors=authors, abstracts=abstracts)
return(info)
}
extract <- extractZoteroTxt(zot_data,query1,query2,condition, len, between)
extract
length(extract$lines.merge)
lines.merge=NA
!=is.na(lines.merge)
!is.na(lines.merge)
is.na(lines.merge)
extractZoteroTxt <- function(zot_data,query1,query2,condition, len, between){
# num <- length(x$name)
require(tm)
require(qdapRegex)
#zot_data <- unlist(zot_data)
# zot_data <-
#zot_data <- text.extract
num <- length(zot_data[[5]])
query1 = query1
query2 = query2
condition = condition
len <- len
between <- between
# context <- 5
lines <- list()
text.extract <- list()
#kwic.extract <- list()
#
w = 1
titles <-vector()
authors <-vector()
datetimes <- vector()
abstracts <- vector()
extraction <- list()
# texts <- vector()
# titles <-vector()
# authors <- vector()
#  datetimes <- vector()
for (i in 1:num) {
lines.merge=NA
#content <- zot_data[[i]]
content <- zot_data[[5]][i]
corpus.collapse<-paste(content,collapse=" ")
text.punct<-  gsub('[[:digit:]]+', '', corpus.collapse)
text.punct <- tolower(text.punct)
text.punct <-rm_citation(text.punct)
text.punct <-rm_citation(text.punct, pattern="@rm_citation3")
text.punct <-rm_citation(text.punct, pattern="@rm_citation2")
text.punct <-rm_round(text.punct)
text.punct <-rm_curly(text.punct)
text.punct <-rm_square(text.punct)
text.split<-unlist(strsplit(text.punct, "References|references|REFERENCES"))
#text.split <- unlist(text.p)
text.punct<-text.split[1]
text.punct <- gsub("[^[:alnum:] ]", "", text.punct)
text.punct <- gsub("\\s\\s+"," ",text.punct)
# lda.list <- unlist(strsplit(corpus.collapse[[i]], "\\s+"))
lda.list <- unlist(strsplit(text.punct, "\\s+"))
# remove punctuation
# if (condition %in% "and") {
loc1<- grep(query1, lda.list,perl=TRUE)
loc2<- grep(query2, lda.list,perl=TRUE)
### choose the smallest
list.loc <- list(loc1,loc2)
if (length(loc1)<length(loc2)){
z=1
# ### Add between window
for (k in 1:length(loc1)) {
# if ((loc1[k]-between)>0) {
strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
#   else {
#     strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
if (query2 %in% strings) {
### add left and right context
match.string <- lda.list[(loc1[k]-between-len):(loc1[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# }
}
else {
z=1
### Add between window
for (k in 1:length(loc2)) {
# if ((loc2[k]-between)>0) {
strings <- lda.list[(loc2[k]):(loc2[k]+between)]
if (query1 %in% strings) {
### add left and right context
match.string <- lda.list[(loc2[k]-between-len):(loc2[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
# lines[[k]] <- line
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# text.extract[[i]] <- lines.merge
#  }
}
# lines.merge <- paste(unlist(lines), collapse=" ")
if (!is.na(lines.merge)) {
#text.extract[[i]] <- lines.merge
text.extract[[w]] <- lines.merge
title <- zot_data[[1]][i]
datetime <- zot_data[[4]][i]
abstract <- zot_data[[2]][i]
name <- zot_data[[3]][i]
titles[w] <- title
authors[w] <- name
datetimes[w] <- datetime
abstracts[w] <- abstract
w=w+1
}
}
text.extract <- unlist(text.extract)
info <- list(lines.merge=lines.merge,text.extract=text.extract,titles=titles,datetimes=datetimes, authors=authors, abstracts=abstracts)
return(info)
}
extract <- extractZoteroTxt(zot_data,query1,query2,condition, len, between)
extract
extractZoteroTxt <- function(zot_data,query1,query2,condition, len, between){
# num <- length(x$name)
require(tm)
require(qdapRegex)
#zot_data <- unlist(zot_data)
# zot_data <-
#zot_data <- text.extract
num <- length(zot_data[[5]])
query1 = query1
query2 = query2
condition = condition
len <- len
between <- between
# context <- 5
lines <- list()
text.extract <- list()
#kwic.extract <- list()
#
w = 1
titles <-vector()
authors <-vector()
datetimes <- vector()
abstracts <- vector()
extraction <- list()
# texts <- vector()
# titles <-vector()
# authors <- vector()
#  datetimes <- vector()
for (i in 1:num) {
lines.merge=NA
#content <- zot_data[[i]]
content <- zot_data[[5]][i]
corpus.collapse<-paste(content,collapse=" ")
text.punct<-  gsub('[[:digit:]]+', '', corpus.collapse)
text.punct <- tolower(text.punct)
text.punct <-rm_citation(text.punct)
text.punct <-rm_citation(text.punct, pattern="@rm_citation3")
text.punct <-rm_citation(text.punct, pattern="@rm_citation2")
text.punct <-rm_round(text.punct)
text.punct <-rm_curly(text.punct)
text.punct <-rm_square(text.punct)
text.split<-unlist(strsplit(text.punct, "References|references|REFERENCES"))
#text.split <- unlist(text.p)
text.punct<-text.split[1]
text.punct <- gsub("[^[:alnum:] ]", "", text.punct)
text.punct <- gsub("\\s\\s+"," ",text.punct)
# lda.list <- unlist(strsplit(corpus.collapse[[i]], "\\s+"))
lda.list <- unlist(strsplit(text.punct, "\\s+"))
# remove punctuation
# if (condition %in% "and") {
loc1<- grep(query1, lda.list,perl=TRUE)
loc2<- grep(query2, lda.list,perl=TRUE)
### choose the smallest
list.loc <- list(loc1,loc2)
if (length(loc1)<length(loc2)){
z=1
# ### Add between window
for (k in 1:length(loc1)) {
# if ((loc1[k]-between)>0) {
strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
#   else {
#     strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
if (query2 %in% strings) {
### add left and right context
match.string <- lda.list[(loc1[k]-between-len):(loc1[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# }
}
else {
z=1
### Add between window
for (k in 1:length(loc2)) {
# if ((loc2[k]-between)>0) {
strings <- lda.list[(loc2[k]):(loc2[k]+between)]
if (query1 %in% strings) {
### add left and right context
match.string <- lda.list[(loc2[k]-between-len):(loc2[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
# lines[[k]] <- line
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
text.extract[[w]] <- lines.merge
title <- zot_data[[1]][i]
datetime <- zot_data[[4]][i]
abstract <- zot_data[[2]][i]
name <- zot_data[[3]][i]
titles[w] <- title
authors[w] <- name
datetimes[w] <- datetime
abstracts[w] <- abstract
# text.extract[[i]] <- lines.merge
#  }
w=w+1
}
# lines.merge <- paste(unlist(lines), collapse=" ")
# if (!is.na(lines.merge)) {
#text.extract[[i]] <- lines.merge
# }
}
text.extract <- unlist(text.extract)
info <- list(lines.merge=lines.merge,text.extract=text.extract,titles=titles,datetimes=datetimes, authors=authors, abstracts=abstracts)
return(info)
}
extract <- extractZoteroTxt(zot_data,query1,query2,condition, len, between)
extract
extractZoteroTxt <- function(zot_data,query1,query2,condition, len, between){
# num <- length(x$name)
require(tm)
require(qdapRegex)
#zot_data <- unlist(zot_data)
# zot_data <-
#zot_data <- text.extract
num <- length(zot_data[[5]])
query1 = query1
query2 = query2
condition = condition
len <- len
between <- between
# context <- 5
lines <- list()
text.extract <- list()
#kwic.extract <- list()
#
w = 1
titles <-vector()
authors <-vector()
datetimes <- vector()
abstracts <- vector()
extraction <- list()
# texts <- vector()
# titles <-vector()
# authors <- vector()
#  datetimes <- vector()
for (i in 1:num) {
# lines.merge=NA
#content <- zot_data[[i]]
content <- zot_data[[5]][i]
corpus.collapse<-paste(content,collapse=" ")
text.punct<-  gsub('[[:digit:]]+', '', corpus.collapse)
text.punct <- tolower(text.punct)
text.punct <-rm_citation(text.punct)
text.punct <-rm_citation(text.punct, pattern="@rm_citation3")
text.punct <-rm_citation(text.punct, pattern="@rm_citation2")
text.punct <-rm_round(text.punct)
text.punct <-rm_curly(text.punct)
text.punct <-rm_square(text.punct)
text.split<-unlist(strsplit(text.punct, "References|references|REFERENCES"))
#text.split <- unlist(text.p)
text.punct<-text.split[1]
text.punct <- gsub("[^[:alnum:] ]", "", text.punct)
text.punct <- gsub("\\s\\s+"," ",text.punct)
# lda.list <- unlist(strsplit(corpus.collapse[[i]], "\\s+"))
lda.list <- unlist(strsplit(text.punct, "\\s+"))
# remove punctuation
# if (condition %in% "and") {
loc1<- grep(query1, lda.list,perl=TRUE)
loc2<- grep(query2, lda.list,perl=TRUE)
### choose the smallest
list.loc <- list(loc1,loc2)
if (length(loc1)<length(loc2)){
z=1
# ### Add between window
for (k in 1:length(loc1)) {
# if ((loc1[k]-between)>0) {
strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
#   else {
#     strings <- lda.list[(loc1[k]):(loc1[k]+between)]
#   }
if (query2 %in% strings) {
### add left and right context
match.string <- lda.list[(loc1[k]-between-len):(loc1[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
lines[[z]] <- line
z=z+1
}
}
lines.merge <- paste(unlist(lines), collapse=" ")
# }
}
else {
z=0
### Add between window
for (k in 1:length(loc2)) {
# if ((loc2[k]-between)>0) {
strings <- lda.list[(loc2[k]):(loc2[k]+between)]
if (query1 %in% strings) {
z=1
### add left and right context
match.string <- lda.list[(loc2[k]-between-len):(loc2[k]+between+len)]
line <- paste(match.string, collapse=" ")
line <- gsub("\\s\\s+"," ",line)
# lines[[k]] <- line
lines[[z]] <- line
z=z+1
}
}
if (z>0) {
lines.merge <- paste(unlist(lines), collapse=" ")
text.extract[[w]] <- lines.merge
title <- zot_data[[1]][i]
datetime <- zot_data[[4]][i]
abstract <- zot_data[[2]][i]
name <- zot_data[[3]][i]
titles[w] <- title
authors[w] <- name
datetimes[w] <- datetime
abstracts[w] <- abstract
w=w+1
# text.extract[[i]] <- lines.merge
}
}
# lines.merge <- paste(unlist(lines), collapse=" ")
# if (!is.na(lines.merge)) {
#text.extract[[i]] <- lines.merge
# }
}
text.extract <- unlist(text.extract)
info <- list(lines.merge=lines.merge,text.extract=text.extract,titles=titles,datetimes=datetimes, authors=authors, abstracts=abstracts)
return(info)
}
extract <- extractZoteroTxt(zot_data,query1,query2,condition, len, between)
extract
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
query1 <- ""
is.na(query1)
query1=NA
is.na(query1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
