#    # if ((loc2[k]-between)>0) {
#     strings <- lda.list[(loc2[k]):(loc2[k]+between)]
#     if (query1 %in% strings) {
#       z=z+1
#       ### add left and right context
#       match.string <- lda.list[(loc2[k]-between-len):(loc2[k]+between+len)]
#       line <- paste(match.string, collapse=" ")
#       line <- gsub("\\s\\s+"," ",line)
#      # lines[[k]] <- line
#       lines[[z]] <- line
#       #z=z+1
#     }
#   }
#     lines.merge <- paste(unlist(lines), collapse=" ")
#   #  if (z>0) {
#  # lines.merge <- paste(unlist(lines), collapse=" ")
#  # text.extract[[w]] <- lines.merge
#   title <- zot_data[[1]][i]
#   datetime <- zot_data[[4]][i]
#   abstract <- zot_data[[2]][i]
#   name <- zot_data[[3]][i]
#   titles[w] <- title
#   authors[w] <- name
#   datetimes[w] <- datetime
#   abstracts[w] <- abstract
#   w=w+1
#   text.extract[[w]] <- lines.merge
# }
#contents[[i]] <- loc1
#text.extract[[i]] <- content
#   }
# lines.merge <- paste(unlist(lines), collapse=" ")
if (!is.null(lines.merge)) {
title <- zot_data[[1]][i]
datetime <- zot_data[[4]][i]
abstract <- zot_data[[2]][i]
name <- zot_data[[3]][i]
text.extract[[w]] <- lines.merge
titles[w] <- title
authors[w] <- name
datetimes[w] <- datetime
abstracts[w] <- abstract
print(w)
w=w+1
# print(lines.merge)
}
# text.extract[[i]] <- lda.list
}
}
# lines.merge <- paste(unlist(lines), collapse=" ")
# length(text.extract)
text.extract <- unlist(text.extract)
info <- list(contents=contents,text.extract=text.extract,titles=titles,datetimes=datetimes, authors=authors, abstracts=abstracts)
return(info)
}
mydata <- extractZoteroTxt(zot_data,query1,query2,condition, len, between)
length(mydata[[2]])
length(mydata[[3]])
mydata[[3]]
mydata[[2]]
runApp()
runApp()
require(dplyr)
require(tidytext)
require(janeaustenr)
mydata[[2]]
mydata_bigrams <- mydata[[2]] %>%
unnest_tokens(bigram, text, token = "ngram", n=2)
?unnest_tokens
d <- data_frame(txt = prideprejudice)
d %>%
unnest_tokens(word, txt)
d <- data_frame(txt = mydata[[2]])
d
d %>%
unnest_tokens(word, txt)
d %>%
unnest_tokens(ngram, txt, token="ngram", n=2)
d %>%
unnest_tokens(ngram, txt, token="ngrams", n=2)
d_bigrams %>%
count(bigram, sort = TRUE)
d_bigrams %>%
unnest_tokens(ngram, txt, token="ngrams", n=2)
d_bigrams <- d %>%
unnest_tokens(ngram, txt, token="ngrams", n=2)
d_bigrams %>%
count(bigram, sort = TRUE)
d %>%
unnest_tokens(word, txt)
d_bigrams <- d %>%
unnest_tokens(bigram, txt, token="ngrams", n=2)
d_bigrams %>%
count(bigram, sort = TRUE)
?count
d_bigrams %>%
count(d_bigrams, sort = TRUE)
d_bigrams
d_bigrams %>%
count(bigrams)
d_bigrams %>%
count(bigram)
d %>%
unnest_tokens(word, txt)
d_bigrams <- d %>%
unnest_tokens(bigram, txt, token="ngrams", n=2)
d_bigrams
d_bigrams %>%
count(bigram, sort = TRUE)
d_bigrams %>%
dplyr::count(bigram, sort = TRUE)
bigrams_separated <- d_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigram_counts <- bigrams_filtered %>%
dplyr::count(word1, word2, sort = TRUE)
bigram_counts
d_trigrams <- d%>%
unnest_tokens(trigram, txt, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
count(word1, word2, word3, sort = TRUE)
d_trigrams <- d %>%
unnest_tokens(trigram, txt, token = "ngrams", n = 3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!word3 %in% stop_words$word) %>%
dplyr::count(word1, word2, word3, sort = TRUE)
d_trigrams
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigrams_united
d
d <- data_frame(txt = mydata[[2]], title = mydata[[3]])
d
d <- data_frame(title = mydata[[3]], txt = mydata[[2]])
d
d %>%
unnest_tokens(word, txt)
d_bigrams <- d %>%
unnest_tokens(bigram, txt, token="ngrams", n=2)
d_bigrams %>%
dplyr::count(bigram, sort = TRUE)
bigrams_separated <- d_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_counts <- bigrams_filtered %>%
dplyr::count(word1, word2, sort = TRUE)
bigram_tf_idf <- bigrams_united %>%
count(title, bigram) %>%
bind_tf_idf(bigram, title, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf <- bigrams_united %>%
dplyr::count(title, bigram) %>%
bind_tf_idf(bigram, title, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
bigram_tf_idf
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 2, scales = "free") +
coord_flip()
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
x11()
bigram_tf_idf
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_tf_idf
stop_words$word
addwords <- c("page","blank")
addwords <- c("page","blank")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords)
bigrams_filtered
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_tf_idf <- bigrams_united %>%
dplyr::count(title, bigram) %>%
bind_tf_idf(bigram, title, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
x11()
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords) %>%
filter(length(word1) < 15,
length(word2) < 15)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigrams_united
bigrams_filtered
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords) %>%
filter(length(word1) > 15,
length(word2) > 15)
bigrams_filtered
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords) %>%
filter(length(word1) < 15,
length(word2) < 15)
bigrams_filtered
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords) %>%
filter(length(word1) < 15) %>%
filter(length(word2) < 15)
bigrams_filtered
d
bigram_tf_idf <- bigrams_united %>%
dplyr::count(bigram) %>%
bind_tf_idf(title, n) %>%
arrange(desc(tf_idf))
?bind_tf_idf
bigram_counts
bigram_counts <- bigrams_united %>%
dplyr::count(word1, word2, sort = TRUE)
bigram_counts <- bigrams_united %>%
dplyr::count(bigram, sort = TRUE)
bigram_counts
bigrams_united
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigrams_united
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_counts <- bigrams_filtered %>%
dplyr::count(word1, word2, sort = TRUE)
bigram_counts
bigrams_united
bigrams_separated
bigrams_counts_united <- bigrams_united %>%
dplyr::count(bigram, sort = TRUE)
bigrams_counts_united
bigram_vis %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_vis <- bigrams_counts_united %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
x11()
bigram_vis <- bigrams_counts_united %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_vis <- bigrams_counts_united %>%
top_n(5) %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_vis <- bigrams_counts_united %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
bigram_vis <- bigrams_counts_united %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
coord_flip()
ggplot( bigrams_counts_united, aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
coord_flip()
ggplot( bigrams_counts_united, aes(bigram, n)) +
geom_col(show.legend = FALSE)
ggplot( bigrams_counts_united[1:15,], aes(bigram, n)) +
geom_col(show.legend = FALSE)
bigram_vis <- bigrams_counts_united[1:15,] %>%
ggplot(aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
coord_flip()
ggplot(bigrams_counts_united[1:15,],aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count")
ggplot(bigrams_counts_united[1:15,],aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
coord_flip()
runApp()
runApp()
ngramBuilder <- function(extract) {
require(dplyr)
require(tidytext)
require(janeaustenr)
require(tidyplyr)
d <- data_frame(title = extract[[3]], txt = extract[[2]])
d %>%
unnest_tokens(word, txt)
d_bigrams <- d %>%
unnest_tokens(bigram, txt, token="ngrams", n=2)
d_bigrams %>%
dplyr::count(bigram, sort = TRUE)
bigrams_separated <- d_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
addwords <- c("page","blank")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
# new bigram counts:
bigram_counts <- bigrams_filtered %>%
dplyr::count(word1, word2, sort = TRUE)
bigrams_counts_united <- bigrams_united %>%
dplyr::count(bigram, sort = TRUE)
### trigrams
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
# d_trigrams <- d %>%
#   unnest_tokens(trigram, txt, token = "ngrams", n = 3) %>%
#   separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
#   filter(!word1 %in% stop_words$word,
#          !word2 %in% stop_words$word,
#          !word3 %in% stop_words$word) %>%
#   dplyr::count(word1, word2, word3, sort = TRUE)
info <- list(bigrams_counts_united, d, bigram_tf_idf)
return(info)
}
ngramBuilder(mydata)
ngramBuilder <- function(extract) {
require(dplyr)
require(tidytext)
require(janeaustenr)
require(tidyverse)
d <- data_frame(title = extract[[3]], txt = extract[[2]])
d %>%
unnest_tokens(word, txt)
d_bigrams <- d %>%
unnest_tokens(bigram, txt, token="ngrams", n=2)
d_bigrams %>%
dplyr::count(bigram, sort = TRUE)
bigrams_separated <- d_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
addwords <- c("page","blank")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% addwords,
!word2 %in% addwords)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
# new bigram counts:
bigram_counts <- bigrams_filtered %>%
dplyr::count(word1, word2, sort = TRUE)
bigrams_counts_united <- bigrams_united %>%
dplyr::count(bigram, sort = TRUE)
### trigrams
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup %>%
ggplot(aes(bigram, tf_idf, fill = title)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~title, ncol = 1, scales = "free") +
coord_flip()
# d_trigrams <- d %>%
#   unnest_tokens(trigram, txt, token = "ngrams", n = 3) %>%
#   separate(trigram, c("word1", "word2", "word3"), sep = " ") %>%
#   filter(!word1 %in% stop_words$word,
#          !word2 %in% stop_words$word,
#          !word3 %in% stop_words$word) %>%
#   dplyr::count(word1, word2, word3, sort = TRUE)
info <- list(bigrams_counts_united, d, bigram_tf_idf)
return(info)
}
ngramBuilder(mydata)
p <- ngramBuilder(mydata)
p
p[[1]][1:15,]
ggplot(p[[1]][1:15,],aes(bigram, n)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "count") +
coord_flip()
runApp()
arrange(desc(tf_idf))
bigram_tf_idf %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(title) %>%
top_n(5) %>%
ungroup
runApp()
runApp()
runApp()
