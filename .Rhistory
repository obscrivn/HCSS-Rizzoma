plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
library(party)
fit <- ctree(Kyphosis ~ Age + Number + Start,
data=kyphosis)
plot(fit, main="Conditional Inference Tree for Kyphosis")
file <- "http://www.stat.berkeley.edu/classes/s133/data/cars.tab"
cars = read.delim(file,stringsAsFactors=FALSE)
cars.use = cars[,-c(1,2)] # exclude two first rows
medians = apply(cars.use,2,median)
mads = apply(cars.use,2,mad)
cars.use = scale(cars.use,center=medians,scale=mads)
cars.dist = dist(cars.use)
cars.hclust = hclust(cars.dist)
plot(cars.hclust,labels=cars$Car,main='Default from hclust')
cars = read.delim(file,stringsAsFactors=FALSE)
cars.use = cars[,-c(1,2)] # exclude two first rows
medians = apply(cars.use,2,median)
mads = apply(cars.use,2,mad)
cars.use = scale(cars.use,center=medians,scale=mads)
cars.dist = dist(cars.use)
cars.hclust = hclust(cars.dist)
url <- "http://rstatistics.net/wp-content/uploads/2015/09/ozone.csv"
inputData <- read.csv(url)  # import data
outlier_values <- boxplot.stats(inputData$pressure_height)$out  # outlier values.
boxplot(inputData$pressure_height, main="Pressure Height", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
url <- "http://rstatistics.net/wp-content/uploads/2015/09/ozone.csv"
ozone <- read.csv(url)
par(mfrow=c(2,1))
boxplot(ozone_reading ~ Month, data=ozone, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(ozone_reading ~ Day_of_week, data=ozone, main="Ozone reading for days of week")  # this may not be significant, as day of week variable is a subset of the month var.
boxplot(ozone_reading ~ Month, data=ozone, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(ozone_reading ~ Day_of_week, data=ozone, main="Ozone reading for days of week")  # this may not be significant, as day of week variable is a subset of the month var.
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
x11()
plotcp(fit) # visualize cross-validation results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit <- ctree(Kyphosis ~ Age + Number + Start,
data=kyphosis)
x11()
plot(fit, main="Conditional Inference Tree for Kyphosis")
rbind(8, 15, 22, 29, 36) - 22
?lsfit
age = c(8, 15, 22, 29, 36)
age
mean(age)
age-mean(age)
months <- rep(1:12,1)
months - mean(months)
?n.iter
library(rjags)
?n.iter
??n.iter
?dic.samples
?contr.poly
689392 + 667594 + 694926 + 680890 +691541 + 686913 + 682046
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
showReactLog(TRUE)
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
showReactLog(TRUE)
options(shiny.reactlog=TRUE)
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
options(shiny.reactlog=TRUE)
showReactLog(TRUE)
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
showReactLog(TRUE)
?source
gender <- "m"
mynumber <- 5
mystring <- "This is my string"
mywords <- c("These", "are", "my","words")
shiny::runApp('Desktop/test3')
?read.csv
?plot
library("collapsibleTree", lib.loc="~/Library/R/3.3/library")
?radialNetwork
??radialNetwork
#library(dendextend)
#library(data.tree)
#library(d3Tree)
library(collapsibleTree)
library(dplyr)
myfile <- read.csv("skillsdes.csv", header=TRUE,stringsAsFactors = FALSE)
library("networkD3", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
edit(radialNetwork)
library(networkD3)
url <- "radial_tree_skills_MOCK_DATA.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE)
url <- "radial_tree_skills_MOCK_DATA.txt"
url <- "data-json.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE)
url <- "data-json.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE)
Flare <- jsonlite::fromJSON("data-json.txt", simplifyDataFrame = FALSE)
url <- "data-json.txt"
Flare <- jsonlite::fromJSON("data-json.txt", simplifyDataFrame = FALSE)
Flare <- jsonlite::fromJSON("data-json.txt", simplifyDataFrame = FALSE)
Flare <- jsonlite::fromJSON("data-json.txt", simplifyDataFrame = FALSE)
Flare <- jsonlite::fromJSON("data-json.txt", simplifyDataFrame = FALSE,flatten = TRUE)
url = "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/flare.json"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE,flatten = TRUE)
radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)
url <- "data-json.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE,flatten = TRUE)
url <- "data-json.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE,flatten = TRUE)
url <- "data-json.txt"
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE,flatten = TRUE)
Flare <- jsonlite::fromJSON(url, simplifyDataFrame = FALSE)
Flare <- fromJSON(url, simplifyDataFrame = FALSE)
library(rjson)
Flare <- fromJSON(url, simplifyDataFrame = FALSE)
Flare <- fromJSON(url)
?fromJSON
url <- "data-json.txt"
Flare <- fromJSON(url)
Flare <- fromJSON(url,unexpected.escape = "skip" )
Flare <- fromJSON(url,unexpected.escape = "error" )
cc <- read.csv(file.choose())
cc <- read.csv(file.choose() stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
library(dplyr)
library(ggnetwork)
library(ggplot2)
library(readr)
library(stringr)
library(tnet)
library(network)
install.packages("tnet")
library(tnet)
cc$keywords %>%
str_split("\s+") %>%
unlist %>%
table %>%
data.frame %>%
arrange(-Freq) %>%
filter(Freq > 1)
cc$keywords %>%
str_split(" +") %>%
unlist %>%
table %>%
data.frame %>%
arrange(-Freq) %>%
filter(Freq > 1)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc$V2 %>%
str_split(" ") %>%
unlist %>%
table %>%
data.frame %>%
arrange(-Freq) %>%
filter(Freq > 1)
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
e <- group_by(e, X1, X2) %>%
summarise(w = sum(w)) %>%
filter(X1 != X2)
n <- network(e[, -3], directed = FALSE)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
e
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
e
e <- group_by(e, X1, X2) %>%
summarise(w = sum(w)) %>%
filter(X1 != X2)
e
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
n <- network(e[, -3], directed = FALSE)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
stopifnot(nrow(t) == network.size(n))
set.vertex.attribute(n, "degree_w", t[, "output" ])
l <- n %v% "degree_w"
l <- ifelse(l >= median(l), network.vertex.names(n), NA)
stopifnot(length(l) == network.size(n))
set.vertex.attribute(n, "label", l)
ggplot(n, aes(x, y, xend = xend, yend = yend)) +
geom_edges(aes(color = weight)) +
geom_nodes(color = "grey50") +
geom_nodelabel(aes(size = degree_w, label = label),
color = "grey20", label.size = NA) +
scale_size_continuous(range = c(2, 8)) +
scale_color_gradient2(low = "grey25", midpoint = 0.75, high = "black") +
guides(size = FALSE, color = FALSE) +
theme_blank()
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
options(expressions = 500000)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
library(impute)
library(dplyr)
library(ggnetwork)
library(ggplot2)
library(readr)
library(stringr)
library(tnet)
library(network) # kee
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc$V2 %>%
str_split(" ") %>%
unlist %>%
table %>%
data.frame %>%
arrange(-Freq) %>%
filter(Freq > 1)
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
n <- network(e[, -3], directed = FALSE)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
stopifnot(nrow(t) == network.size(n))
set.vertex.attribute(n, "degree_w", t[, "output" ])
l <- n %v% "degree_w"
l <- ifelse(l >= median(l), network.vertex.names(n), NA)
stopifnot(length(l) == network.size(n))
set.vertex.attribute(n, "label", l)
ggplot(n, aes(x, y, xend = xend, yend = yend)) +
geom_edges(aes(color = weight)) +
geom_nodes(color = "grey50") +
geom_nodelabel(aes(size = degree_w, label = label),
color = "grey20", label.size = NA) +
scale_size_continuous(range = c(2, 8)) +
scale_color_gradient2(low = "grey25", midpoint = 0.75, high = "black") +
guides(size = FALSE, color = FALSE) +
theme_blank()
head(n)
n$mel[1]
n$mel[5]
n$mel[10]
library("shiny", lib.loc="~/Library/R/3.3/library")
runExample("04_mpg")
runApp('Documents/CL/Classes/R/ShinySeries/shiny-examples-master/082-word-cloud')
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
print(doc2$.attrs[[1]])
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero <- function(x) {
uris.name <- x
# #Get all the lines of interest in the file
zot.lines <- readLines(uris.name)#zot.file)
zot.lines <- zot.lines[grep("<rdf:resource",zot.lines)]
#zot.lines <- zot.lines[grepl(".pdf\"", zot.lines)]
zot.line.parser <- function(z){
#This takes one of our rdfresource lines and returns the pdf title
#This relies on the rdf:resource tag having exactly two double quotes
#Seems safe enough, but just to be safe we take the first and last quote mark
#This avoids issues with quotes in a title/file name.
require(stringr)
require(tools)
first <- 1
last <- dim(str_locate_all(z,'"')[[1]])[1]
start <- str_locate_all(z,'"')[[1]][first] + 1
stop <- str_locate_all(z[1],'"')[[1]][last] -1
substr(z, start, stop)
}
zot.pdf <- unlist(lapply(zot.lines, zot.line.parser))
}
zotero.rdf <-  zotero(x)
zotero.rdf[5]
zotero_rdf <- function(x) {
require(XML)
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
#nodes = xpathSApply(xml, "//bib:[contains(Article) or contains(Report)]",xmlValue)
#bib:BookSection
#bib:Thesis
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
for (i in 1:length(nodes)) {
print("NEW")
node <- nodes[[i]]
doc <- xmlToList(node)
title <-   doc$title
abstract <- doc$abstract
date <- doc$date
surname <- doc$authors$Seq$li$Person$surname
firstname <- doc$authors$Seq$li$Person$givenname
link <- doc$link@.Data
print(link)
# attachments <- getNodeSet(xml, "//z:Attachment")
attachment <- attachments[[i]]
doc2 <- xmlToList(attachment)
print(doc2$.attrs[[1]])
## Test for file item # between article and  attachement
if (link %in% doc2$.attrs[[1]]==TRUE) {
print(link)
print(doc2$.attrs[[1]])
type <-  doc2$type # test pdf
path <-   doc2$resource@.Data  # file path
# if (type %in% "application/pdf"==TRUE) {
article <- c(title, abstract,date,surname, firstname,link,type,path)
articles[[k]] <- article
k=k+1
print(type)
print(path)
}
else { print("none")
print(link)
print(doc2$.attrs[[1]])
print(path)
}
}#}
return(articles)
}
zotero2 < zotero_rdf(x)
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
zotero2
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
nodes = getNodeSet(xml, "//bib:Article")
print(length(nodes))
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
