e
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
e
e <- group_by(e, X1, X2) %>%
summarise(w = sum(w)) %>%
filter(X1 != X2)
e
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
n <- network(e[, -3], directed = FALSE)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
stopifnot(nrow(t) == network.size(n))
set.vertex.attribute(n, "degree_w", t[, "output" ])
l <- n %v% "degree_w"
l <- ifelse(l >= median(l), network.vertex.names(n), NA)
stopifnot(length(l) == network.size(n))
set.vertex.attribute(n, "label", l)
ggplot(n, aes(x, y, xend = xend, yend = yend)) +
geom_edges(aes(color = weight)) +
geom_nodes(color = "grey50") +
geom_nodelabel(aes(size = degree_w, label = label),
color = "grey20", label.size = NA) +
scale_size_continuous(range = c(2, 8)) +
scale_color_gradient2(low = "grey25", midpoint = 0.75, high = "black") +
guides(size = FALSE, color = FALSE) +
theme_blank()
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
options(expressions = 500000)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
library(impute)
library(dplyr)
library(ggnetwork)
library(ggplot2)
library(readr)
library(stringr)
library(tnet)
library(network) # kee
cc <- read.csv(file.choose(), stringsAsFactors = FALSE,header=FALSE)
cc$V2 %>%
str_split(" ") %>%
unlist %>%
table %>%
data.frame %>%
arrange(-Freq) %>%
filter(Freq > 1)
e <- cc$V2 %>%
str_split(" ") %>%
lapply(function(x) {
expand.grid(x, x, w = 1 / length(x), stringsAsFactors = FALSE)
}) %>%
bind_rows
e <- apply(e[, -3], 1, str_sort) %>%
t %>%
data.frame(stringsAsFactors = FALSE) %>%
mutate(w = e$w)
n <- network(e[, -3], directed = FALSE)
stopifnot(nrow(e) == network.edgecount(n))
set.edge.attribute(n, "weight", e$w)
t <- as.edgelist(n, attrname = "weight") %>%
symmetrise_w %>%
as.tnet %>%
degree_w
stopifnot(nrow(t) == network.size(n))
set.vertex.attribute(n, "degree_w", t[, "output" ])
l <- n %v% "degree_w"
l <- ifelse(l >= median(l), network.vertex.names(n), NA)
stopifnot(length(l) == network.size(n))
set.vertex.attribute(n, "label", l)
ggplot(n, aes(x, y, xend = xend, yend = yend)) +
geom_edges(aes(color = weight)) +
geom_nodes(color = "grey50") +
geom_nodelabel(aes(size = degree_w, label = label),
color = "grey20", label.size = NA) +
scale_size_continuous(range = c(2, 8)) +
scale_color_gradient2(low = "grey25", midpoint = 0.75, high = "black") +
guides(size = FALSE, color = FALSE) +
theme_blank()
head(n)
n$mel[1]
n$mel[5]
n$mel[10]
library("shiny", lib.loc="~/Library/R/3.3/library")
runExample("04_mpg")
runApp('Documents/CL/Classes/R/ShinySeries/shiny-examples-master/082-word-cloud')
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
print(doc2$.attrs[[1]])
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero <- function(x) {
uris.name <- x
# #Get all the lines of interest in the file
zot.lines <- readLines(uris.name)#zot.file)
zot.lines <- zot.lines[grep("<rdf:resource",zot.lines)]
#zot.lines <- zot.lines[grepl(".pdf\"", zot.lines)]
zot.line.parser <- function(z){
#This takes one of our rdfresource lines and returns the pdf title
#This relies on the rdf:resource tag having exactly two double quotes
#Seems safe enough, but just to be safe we take the first and last quote mark
#This avoids issues with quotes in a title/file name.
require(stringr)
require(tools)
first <- 1
last <- dim(str_locate_all(z,'"')[[1]])[1]
start <- str_locate_all(z,'"')[[1]][first] + 1
stop <- str_locate_all(z[1],'"')[[1]][last] -1
substr(z, start, stop)
}
zot.pdf <- unlist(lapply(zot.lines, zot.line.parser))
}
zotero.rdf <-  zotero(x)
zotero.rdf[5]
zotero_rdf <- function(x) {
require(XML)
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
#nodes = xpathSApply(xml, "//bib:[contains(Article) or contains(Report)]",xmlValue)
#bib:BookSection
#bib:Thesis
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
for (i in 1:length(nodes)) {
print("NEW")
node <- nodes[[i]]
doc <- xmlToList(node)
title <-   doc$title
abstract <- doc$abstract
date <- doc$date
surname <- doc$authors$Seq$li$Person$surname
firstname <- doc$authors$Seq$li$Person$givenname
link <- doc$link@.Data
print(link)
# attachments <- getNodeSet(xml, "//z:Attachment")
attachment <- attachments[[i]]
doc2 <- xmlToList(attachment)
print(doc2$.attrs[[1]])
## Test for file item # between article and  attachement
if (link %in% doc2$.attrs[[1]]==TRUE) {
print(link)
print(doc2$.attrs[[1]])
type <-  doc2$type # test pdf
path <-   doc2$resource@.Data  # file path
# if (type %in% "application/pdf"==TRUE) {
article <- c(title, abstract,date,surname, firstname,link,type,path)
articles[[k]] <- article
k=k+1
print(type)
print(path)
}
else { print("none")
print(link)
print(doc2$.attrs[[1]])
print(path)
}
}#}
return(articles)
}
zotero2 < zotero_rdf(x)
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
zotero2
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
zotero2 <- zotero_rdf(x)
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
nodes = getNodeSet(xml, "//bib:Article")
print(length(nodes))
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
zotero2 <- zotero_rdf(x)
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
x<- "/Users/olgascrivner/Documents/ITMS/TextMiningZotero/HCSS-Rizzoma/English - first spiral corpus.rdf"
xml = xmlTreeParse(x,useInternalNodes=TRUE)
k=1
articles <- list()
title <- ""
abstract <- ""
date <- ""
surname <- ""
firstname <- ""
link <- ""
type <- ""
path <- ""
nodes = getNodeSet(xml, "//bib:Article")
attachments <- getNodeSet(xml, "//z:Attachment")
print(length(nodes))
print(length(attachments))
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
install.packages("ggmap")
library("ggmap", lib.loc="~/Library/R/3.3/library")
hdf <- get_map("houston, texas")
ggmap(hdf, extent = "normal")
ggmap(get_map(maptype = "satellite"), extent = "device") +
stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5)
library(grid)
baylor <- get_map("baylor university", zoom = 15, maptype = "satellite")
ggmap(baylor)
install.packages("ggproto")
install.packages("GeomRasterAnn")
data(zips)
ggmap(get_map(maptype = "satellite", zoom = 8), extent = "device") +
geom_polygon(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = NA, fill = "red", alpha = .2) +
geom_path(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = "white", alpha = .4, size = .4)
library("devtools", lib.loc="~/Library/R/3.3/library")
devtools::install_github("dkahle/ggmap")
ggmap(get_map(maptype = "satellite", zoom = 8), extent = "device") +
geom_polygon(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = NA, fill = "red", alpha = .2) +
geom_path(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = "white", alpha = .4, size = .4)
library(ggmap)
ggmap(get_map(maptype = "satellite", zoom = 8), extent = "device") +
geom_polygon(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = NA, fill = "red", alpha = .2) +
geom_path(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = "white", alpha = .4, size = .4)
library("ggmap", lib.loc="~/Library/R/3.3/library")
library("ggmap", lib.loc="~/Library/R/3.3/library")
library("ggmap", lib.loc="~/Library/R/3.3/library")
install.packages("ggmap")
library(ggmap)
ggmap(get_map(maptype = "satellite", zoom = 8), extent = "device") +
geom_polygon(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = NA, fill = "red", alpha = .2) +
geom_path(aes(x = lon, y = lat, group = plotOrder),
data = zips, colour = "white", alpha = .4, size = .4)
install.packages("dismo")
library(dismo)
p <- matrix(c(17, 42, 85, 70, 19, 53, 26, 84, 84, 46, 48, 85, 4, 95, 48, 54, 66, 74, 50, 48,
28, 73, 38, 56, 43, 29, 63, 22, 46, 45, 7, 60, 46, 34, 14, 51, 70, 31, 39, 26), ncol=2)
v <- voronoi(p)
v
gbm.plot(v)
install.packages("gbm")
library(gbm)
gbm.plot(v)
v
install.packages("dbplyr")
library("devtools", lib.loc="~/Library/R/3.3/library")
devtools::install_github("rstudio/pool")
install.packages("DBI")
shiny::runApp('Documents/MCS/DataBase/project/App/wine-app')
install.packages("RMySQL")
runApp('Documents/MCS/DataBase/project/App/wine-app')
install.packages("RPostgreSQL")
runApp('Documents/MCS/DataBase/project/App/wine-app')
runApp('Documents/MCS/DataBase/project/App/wine-app')
runApp('Documents/MCS/DataBase/project/App/wine-app')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
library("dbplyr")
library("pool")
library("DBI")
library("RPostgreSQL")
conn <- dbConnect(
drv=dbDriver("PostgreSQL"),
host="sp18-cs411-dso-005.cs.illinois.edu",
# host="localhost",
port=5432, dbname="wine",user="postgres",password = "postgres"
)
class(conn)
dbDisconnect(conn)
dbGetQuery(conn, paste0(
"SELECT * FROM ", wine," LIMIT 5 ;"))
class(conn)
conn <- dbConnect(
drv=dbDriver("PostgreSQL"),
host="sp18-cs411-dso-005.cs.illinois.edu",
# host="localhost",
port=5432, dbname="wine",user="postgres",password = "postgres"
)
dbGetQuery(conn, paste0(
"SELECT * FROM ", wine," LIMIT 5 ;"))
dbDisconnect(conn)
dbGetQuery(conn, paste0(
"SELECT * FROM wine LIMIT 5 ;"))
conn <- dbConnect(
drv=dbDriver("PostgreSQL"),
host="sp18-cs411-dso-005.cs.illinois.edu",
# host="localhost",
port=5432, dbname="wine",user="postgres",password = "postgres"
)
dbGetQuery(conn, paste0(
"SELECT * FROM wine LIMIT 5 ;"))
dbDisconnect(conn)
myTablewine <- dbReadTable(con, c("tmp","wine"))
myTablewine <- dbReadTable(conn, c("tmp","wine"))
conn <- dbConnect(
drv=dbDriver("PostgreSQL"),
host="sp18-cs411-dso-005.cs.illinois.edu",
# host="localhost",
port=5432, dbname="wine",user="postgres",password = "postgres"
)
myTablewine <- dbReadTable(conn, c("tmp","wine"))
myTablewine <- dbReadTable(conn, "wine")
dbDisconnect(conn)
conn <- dbConnect(
drv=dbDriver("PostgreSQL"),
#drv = RMySQL::MySQL(),
#dbname = "shinydemo",
# host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
# username = "guest",
#password = "guest"
host="localhost", port=5432, dbname="wine",user="postgres",password = "postgres"
)
d = tbl(conn, "wine")
library("dbplyr")
d = tbl(conn, "wine")
library("dplyr")
d = tbl(conn, "wine")
head(d)
runApp('Documents/MCS/DataBase/project/App/winetesting')
dbDisconnect(conn)
runApp('Documents/MCS/DataBase/project/App/winetesting')
dbDisconnect(conn)
runApp('Documents/MCS/DataBase/project/App/winetesting')
dbDisconnect(conn)
dbDisconnect(conn)
dbGetQuery(conn, paste0(
"SELECT * FROM wine LIMIT 5 ;"))
myTablewine <- dbReadTable(conn, "wine")
runApp('Documents/MCS/DataBase/project/App/winetesting')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting/Stage 04 - ver 02 with db')
runApp('Documents/MCS/DataBase/project/App/winetesting/Stage 04 - ver 02 with db')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting/Stage 04 - ver 02 with db')
runApp('Documents/MCS/DataBase/project/App/winetesting/Stage 04 - ver 02 with db')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting/Stage 04 - ver 02 with db')
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
x11()
m  # Print the map
x11()
m
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting')
runApp('Documents/MCS/DataBase/project/App/winetesting 3')
runApp('Documents/MCS/DataBase/project/App/winetesting 3')
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("tm")
shiny::runApp('Documents/MCS/DataBase/project/App/winetesting')
library("RSQLite")
sqlite    <- dbDriver("SQLite")
exampledb <- dbConnect(sqlite,"/Users/olgascrivner/Zotero/zotero.sqlite")
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
library("wordcloud2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
install.packages("glmnet", repos = "http://cran.us.r-project.org")
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
?matrix
install.packages("glmnet")
install.packages("glmnet")
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
detach("package:wordcloud2", unload=TRUE)
library("wordcloud2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
install.packages("glmnet")
install.packages("glmnet")
install.packages("Matrix")
library("wordcloud2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
shiny::runApp('Documents/ITMS/TextMiningZotero/HCSS-Rizzoma')
